name: PyApps Tests

on:
  push:
    branches:
    - main
    paths:
      - 'components/docs_app/docker/app.py'
      - 'components/data_validation/**'
      - 'components/kafka/scripts/**'
      - 'components/airflow/dags/**'
      - 'components/ml_train/script/**'
      - 'components/spark/scripts/**'
      - 'components/ml_serve/docker/*.py'
      - 'components/ml_train/scripts/**'
      - 'scripts/create_seed.py'
  pull_request:
    branches:
    - main
    paths:
      - 'components/docs_app/docker/app.py'
      - 'components/data_validation/**'
      - 'components/kafka/scripts/**'
      - 'components/airflow/dags/**'
      - 'components/ml_train/script/**'
      - 'components/spark/scripts/**'
      - 'components/ml_serve/docker/*.py'
      - 'components/ml_train/scripts/**'
      - 'scripts/create_seed.py'


jobs:
  test_pyapps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'
      - run: |
          echo -n "${{ secrets.ENV_FILE }}" >> $GITHUB_ENV
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          architecture: "x64"
        env:
          AGENT_TOOLSDIRECTORY: /opt/hostedtoolcache
      - uses: actions/setup-java@v1
        with:
          java-version: '11'
      - uses: vemonet/setup-spark@v1
        with:
          spark-version: '3.1.1'
      - name: Install Pipenv
        run: |
          python -m pip install pipenv
      - name: Add Spark Home
        run: |
          sed -i '/spark_home = \/opt\/spark/d' pytest.ini
      # - name: Cache Dependencies
      #   uses: actions/cache@v2
      #   id: cache-dependencies
      #   with:
      #     path: ./.venv
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pipenv
      - name: Install requirements
        # if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          pipenv install --dev --verbose
      - name: Run tests
        run: |
          # export PYTHONPATH=$PYTHONPATH:.
          pipenv run python -m pytest tests/ -svx
          # # s for print statements
          # # v to increase verbosity
      - name: Format-Lint-Sort
        run: |
          if [[ $(git diff-tree --no-commit-id --name-only --diff-filter=ACMRT -r ${{ github.sha }} -- '*.py' | xargs) ]]; then
          pipenv run python -m black --check $(git diff-tree --no-commit-id --name-only --diff-filter=ACMRT -r "$GITHUB_SHA" -- '*.py' | xargs)
          pipenv run python -m isort $(git diff-tree --no-commit-id --name-only --diff-filter=ACMRT -r "$GITHUB_SHA" -- '*.py' | xargs)
          pipenv run python -m pylint $(git diff-tree --no-commit-id --name-only --diff-filter=ACMRT -r "$GITHUB_SHA" -- '*.py' | xargs)
          fi
