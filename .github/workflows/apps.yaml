# name: PyApps Tests

# on:
#   push:
#     branches:
#     - main
#     paths:
#       - 'components/docs_app/docker/app.py'
#       - 'components/data_validation/**'
#       # - 'components/kafka/scripts/**'
#       - 'components/airflow/dags/**'
#       - 'components/ml_serve/docker/*.py'
#       - 'components/ml_train/scripts/**'
#       - 'scripts/create_seed.py'
#   pull_request:
#     branches:
#     - main
#     paths:
#       - 'components/docs_app/docker/app.py'
#       - 'components/data_validation/**'
#       # - 'components/kafka/scripts/**'
#       - 'components/airflow/dags/**'
#       - 'components/ml_serve/docker/*.py'
#       - 'components/ml_train/scripts/**'
#       - 'scripts/create_seed.py'


# jobs:
#   test_pyapps:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - id: 'auth'
#         uses: 'google-github-actions/auth@v1'
#         with:
#           credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'
#       - run: |
#           echo -n "${{ secrets.ENV_FILE }}" >> $GITHUB_ENV
#       - name: Setup Python
#         uses: actions/setup-python@v3
#         with:
#           python-version: "3.10"
#           architecture: "x64"
#         env:
#           AGENT_TOOLSDIRECTORY: /opt/hostedtoolcache
#       - name: Install Pipenv
#         run: |
#           python -m pip install pipenv
#       - name: Install requirements
#         # if: steps.cache-dependencies.outputs.cache-hit != 'true'
#         run: |
#           pipenv install --dev --verbose
#       - name: Run tests
#         run: |
#           # export PYTHONPATH=$PYTHONPATH:.
#           pipenv run python -m pytest tests/ -svx
#           # # s for print statements
#           # # v to increase verbosity
#       - name: Format-Lint-Sort
#         run: |
#           if [[ $(git diff-tree --no-commit-id --name-only --diff-filter=ACMRT -r ${{ github.sha }} -- '*.py' | xargs) ]]; then
#           pipenv run python -m black --check $(git diff-tree --no-commit-id --name-only --diff-filter=ACMRT -r "$GITHUB_SHA" -- '*.py' | xargs)
#           pipenv run python -m isort $(git diff-tree --no-commit-id --name-only --diff-filter=ACMRT -r "$GITHUB_SHA" -- '*.py' | xargs)
#           pipenv run python -m pylint $(git diff-tree --no-commit-id --name-only --diff-filter=ACMRT -r "$GITHUB_SHA" -- '*.py' | xargs)
#           fi

name: PyApps Tests

on:
  push:
    branches:
      - main
    paths:
      - 'components/**'
      - 'scripts/create_seed.py'
  pull_request:
    branches:
      - main
    paths:
      - 'components/**'
      - 'scripts/create_seed.py'

jobs:
  test_pyapps:
    strategy:
      matrix:
        os: [ubuntu-latest]
        include:
          - directory: 'airflow/dags'
            tests:
              - 'tests/test_airflow_addons.py'
              - 'tests/test_airflow.py'
          - directory: 'data_validation'
            tests: 'tests/test_validation.py'
          - directory: 'docs_app/docker'
            tests: 'tests/test_docsapp.py'
          - directory: 'ml_train/scripts'
            tests: 'tests/test_train.py'
          - directory: 'ml_serve/docker'
            tests: 'tests/test_serve.py'
          - directory: 'scripts'
            tests: 'tests/test_create_seed.py'


    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
            fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'
      - run: |
          echo -n "${{ secrets.ENV_FILE }}" >> $GITHUB_ENV

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pipenv'
      - name: Install pipenv
        run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
      - run: pipenv install --dev --verbose
      - name: Get changed files
        id: changed-files
        run: |
            if ${{ github.event_name == 'pull_request' }}; then
                echo "changed_files=$(git diff --name-only -r HEAD^1 HEAD | xargs)" >> $GITHUB_OUTPUT
            else
                echo "changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | xargs)" >> $GITHUB_OUTPUT
            fi
      - name: List changed files
        run: |
            for file in ${{ steps.changed-files.outputs.changed_files }}; do
                echo "$file was changed"
            done
      - name: Run tests
        run: |
          changed_files="${{ steps.changed-files.outputs.changed_files }}"

          echo "Changed Files:"
          echo "${changed_files}"

          # Loop through the changed files
          IFS=' ' read -ra files <<< "${changed_files}"
          for file in "${files[@]}"; do
            if [[ "${file}" != *.py ]]; then
              echo "Skipping non-Python file: ${file}"
              continue
            fi

            echo "Processing File: ${file}"

            # Extract the directory from the changed file
            directory=$(dirname "${file}")
            echo "Directory: ${directory}"

            # Find the matching test files based on the matrix
            test_files=""
            for item in ${{ matrix.tests }}; do
              matrix_directory=$(echo "${item}" | awk -F ':' '{print $1}')
              matrix_tests=$(echo "${item}" | awk -F ':' '{print $2}')

              if [[ "${directory}" == "${matrix_directory}"* ]]; then
                if [[ -z "${test_files}" ]]; then
                  test_files="${matrix_tests}"
                else
                  test_files="${test_files} ${matrix_tests}"
                fi
              fi
            done

            # Run the tests if relevant test files are found
            if [[ -n "${test_files}" ]]; then
              echo "Running Tests: ${test_files}"
              pipenv run python -m pytest -svx ${test_files}
            else
              echo "No relevant test files found for ${file}"
            fi
          done

      #     if echo "${changed_files}" | grep -qE "^components/${{ matrix.directory }}/"; then
      #       test_directory="tests/${{ matrix.directory }}"
      #       test_files="${{ matrix.tests }}"
      #       echo "Test Directory: $test_directory"
      #       echo "Test Files: $test_files"
      #     else
      #       exit 0
      #     fi

      #     # Handling multiple test files
      #     if [ -n "${test_files}" ]; then
      #       IFS=' ' read -ra test_files_array <<< "${test_files}"
      #       for test_file in "${test_files_array[@]}"; do
      #         echo "Running Test: $test_directory/$test_file"
      #         pipenv run python -m pytest ${test_directory}/${test_file}
      #       done
      #     fi

      # - name: Format-Lint-Sort
      #   run: |
      #     if [[ $(git diff-tree --no-commit-id --name-only --diff-filter=ACMRT -r ${{ github.sha }} -- '*.py' | xargs) ]]; then
      #       pipenv run python -m black --check $(git diff-tree --no-commit-id --name-only --diff-filter=ACMRT -r "$GITHUB_SHA" -- '*.py' | xargs)
      #       pipenv run python -m isort $(git diff-tree --no-commit-id --name-only --diff-filter=ACMRT -r "$GITHUB_SHA" -- '*.py' | xargs)
      #     fi
