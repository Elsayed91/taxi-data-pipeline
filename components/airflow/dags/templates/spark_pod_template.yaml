apiVersion: "sparkoperator.k8s.io/v1beta2"
kind: SparkApplication
metadata:
  name: "{{ job.name }}"
spec:
  type: Python
  mode: cluster
  pythonVersion: "3"
  sparkVersion: "3.1.2"
  imagePullPolicy: {{ job.imagePullPolicy | default('IfNotPresent') }}
  image: "{{ job.image }}"
  restartPolicy:
    type: {{ job.restartPolicy | default('Never') }}
  mainApplicationFile: "{{ job.mainApplicationFile }}"
  hadoopConf:
  "fs.gs.project.id": "{{ job.project }}"
  "google.cloud.auth.service.account.enable": "true"
  "google.cloud.auth.service.account.json.keyfile": "/mnt/secrets/key.json"
  "fs.gs.impl": "com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystem"
  "fs.AbstractFileSystem.gs.impl": "com.google.cloud.hadoop.fs.gcs.GoogleHadoopFS"
  {% if job.volumes is defined or (job.gitsync is defined and job.gitsync) %}
  volumes:
    {% if job.volumes is defined %}
    {% for volume in job.volumes %}
    - name: {{ volume.name }}
      {% if volume.type == 'secret' %}
      secret:
        secretName: {{ volume.reference }}
      {% elif volume.type == 'configMap' %}
      configMap:
        name: {{ volume.reference }}
      {% elif volume.type == 'emptyDir' %}
      emptyDir: {}
      {% endif %}
    {% endfor %}
    {% endif %}
    {% if job.gitsync is defined and job.gitsync %}
    - name: code
      emptyDir: {}
    {% endif %}
  {% endif %}
  nodeSelector:
    iam.gke.io/gke-metadata-server-enabled: "true"
    {% if job.nodeSelector is defined %}
    cloud.google.com/gke-nodepool: {{ job.nodeSelector }}
    {% endif %}
  driver:
    cores: 1
    coreLimit: "1200m"
    coreRequest: 100m
    memory: "512m"
    secrets:
      - name: "gcsfs-creds"
        path: "/mnt/secrets"
        secretType: GCPServiceAccount
    {% if job.envFrom is defined  %}
    envFrom:
    {% for envFrom in job.envFrom %}
    - {% if envFrom.type == 'configMapRef' %}
      configMapRef:
          name: {{ envFrom.name }}
      {% else %}
      secretRef:
          name: {{ envFrom.name }}
      {% endif %}
    {% endfor %}
    {% endif %}
    {% if job.env is defined %}
    env:
    {% for key, value in job.env.items() %}
    - name: {{ key }}
      value: "{{ value }}"
    {% endfor %}
    {% endif %}
    {% for key, value in job.items() %}
    {% if key.startswith('ENV_') %}
    - name: {{ key[4:] }}
      value: "{{ value }}"
    {% endif %}
    {% endfor %}
    labels:
      version: 3.1.2
      metrics-exposed: "true"
    serviceAccount:  {{ job.imagePullPolicy | default('default') }}
      {% if job.volumes is defined or (job.gitsync is defined and job.gitsync) %}
    volumeMounts:
    {% if job.volumes is defined %}
    {% for volume in job.volumes %}
    - name: {{ volume.name }}
      mountPath: {{ volume.mountPath }}
      {% if volume.subPath is defined %}
      subPath: {{ volume.subPath }}
      {% endif %}
    {% endfor %}
    {% endif %}
    {% if job.gitsync is defined and job.gitsync %}
    - name: code
      mountPath: /git
    {% endif %}
    {% endif %}
    {% if job.gitsync is defined and job.gitsync %}
    initContainers:
      - name: git-sync
        image: k8s.gcr.io/git-sync/git-sync:v3.6.2
        imagePullPolicy: Always
        securityContext:
          runAsUser: 65533
        env:
          - name: GIT_SYNC_ONE_TIME
            value: "true"
        envFrom:
          - configMapRef:
              name: git-env
        resources: {}
        volumeMounts:
          - name: code
            mountPath: /git
    {% endif %}
  executor:
    cores: {{ job.coreRequest  | default(1) }} 
    coreRequest: {{ job.coreRequest  | default('100m') }} 
    instances: {{ job.instances }}
    memory: {{ job.executor_memory  | default('512m') }}
      {% if job.envFrom is defined  %}
    envFrom:
    {% for envFrom in job.envFrom %}
    - {% if envFrom.type == 'configMapRef' %}
        configMapRef:
            name: {{ envFrom.name }}
        {% else %}
        secretRef:
            name: {{ envFrom.name }}
        {% endif %}
    {% endfor %}
    {% endif %}
    {% if job.env is defined %}
    env:
    {% for key, value in job.env.items() %}
    - name: {{ key }}
      value: {{ value }}
    {% endfor %}
    {% endif %}
    secrets:
      - name: "gcsfs-creds"
        path: "/mnt/secrets"
        secretType: GCPServiceAccount
    labels:
      version: 3.1.2
      metrics-exposed: "true"
      {% if job.volumes is defined or (job.gitsync is defined and job.gitsync) %}
    volumeMounts:
    {% if job.volumes is defined %}
    {% for volume in job.volumes %}
    - name: {{ volume.name }}
      mountPath: {{ volume.mountPath }}
      {% if volume.subPath is defined %}
      subPath: {{ volume.subPath }}
      {% endif %}
    {% endfor %}
    {% endif %}
    {% if job.gitsync is defined and job.gitsync %}
    - name: code
      mountPath: /git
    {% endif %}
    {% endif %}
    {% if job.gitsync is defined and job.gitsync %}
    initContainers:
      - name: git-sync
        image: k8s.gcr.io/git-sync/git-sync:v3.6.2
        imagePullPolicy: Always
        securityContext:
          runAsUser: 65533
        env:
          - name: GIT_SYNC_ONE_TIME
            value: "true"
        envFrom:
          - configMapRef:
              name: git-env
        resources: {}
        volumeMounts:
          - name: code
            mountPath: /git
    {% endif %}
  monitoring:
    exposeDriverMetrics: true
    exposeExecutorMetrics: true
    prometheus:
      jmxExporterJar: "/prometheus/jmx_prometheus_javaagent-0.11.0.jar"
      port: 8090
